#import Live from _Framework.SessionComponent import SessionComponent #@UnresolvedImportfrom _Framework.ButtonElement import ButtonElement #@UnresolvedImport#from _liveUtils.Logger import log #@UnresolvedImport @UnusedImportfrom _liveUtils.TrackFinder import TrackFinder #@UnresolvedImportfrom consts import * #@UnusedWildImportclass SpecialSessionComponent(SessionComponent):    ' Special session subclass that handles ConfigurableButtons '    __module__ = __name__    def __init__(self, num_tracks, num_scenes, parent):        #log(True, __name__)        TrackFinder.reset_and_parse(self.song())        SessionComponent.__init__(self, len(self.song().visible_tracks), num_scenes)        self.trackStopper = {}        self.stopperColor = {}        #log(False, __name__)               """ DISCONNECT """    def disconnect(self):        #log(__name__, "disconnect")        #for index in range(len(self._tracks_and_listeners)):        #    track = self._tracks_and_listeners[index][0]        #    listener = self._tracks_and_listeners[index][2]        #if ((track != None) and track.playing_slot_index_has_listener(listener)):        #   track.remove_playing_slot_index_listener(listener)        self.trackStopper = None        self.stopperColor = None        SessionComponent.disconnect(self)        """ OVERWRITTEN TRACK CONTENT GETTER """    def tracks_to_use(self):        return TrackFinder.get_track_array()        # CALLBACK     def _on_fired_slot_index_changed(self, index):        #log("fired slots changed....." + str(index))        self.update_stop_clips_led(index)    #CALLBACK    def _on_playing_slot_index_changed(self, index):        #log("playing slots changed...." + str(index))        self.update_stop_clips_led(index)    """ UPDATE STOP LED """    def update_stop_clips_led(self, index):        if (self.is_enabled() and (self._stop_track_clip_buttons != None)):            #log("update_stop_clip_led (" + str(index) + ")")            button = self._stop_track_clip_buttons[index]            if button == None:                #log("gibts NIIICH!")                return                  if (index in range(len(self._tracks_and_listeners))):                track = self._tracks_and_listeners[index][0]                if (track.fired_slot_index == -2):                    #button.send_value(self._stop_track_clip_value)                    button.send_value(AMBER_BLINK)                elif (track.playing_slot_index < 0 and track.fired_slot_index >= 0):                    button.send_value(56)                elif (track.playing_slot_index >= 0):                    button.send_value(AMBER_HALF)                else:                    button.turn_off()            else:                button.send_value(4)    def _stop_track_value(self, par1, par2):        #log("stoptrack: " + str(par1) + ", " + str(par2) )        coloron = par2._on_value        coloroff = par2._off_value        if par1 == 1:            track_index = self.trackStopper[par2]            track = self.tracks_to_use()[track_index]            track.stop_all_clips()            coloron = par2._on_value            coloroff = par2._off_value            self.stopperColor[par2] = coloron            par2.set_on_off_values(AMBER_BLINK, coloroff)            par2.turn_on()        elif par1 == 0:            par2.turn_off()            coloron = self.stopperColor[par2]            par2.set_on_off_values(coloron, coloroff)                """ SETUP STOP BUTTONS """    def set_stop_track_clip_buttons(self, buttons):        assert ((buttons == None) or (isinstance(buttons, tuple) and (len(buttons) == self._num_tracks)))        # overwrite width        self._num_tracks = 8              #remove old listener        if (self._stop_track_clip_buttons != None):             for button in self._stop_track_clip_buttons:                 if button != None:                    if button.value_has_listener(self._stop_track_value):                        button.remove_value_listener(self._stop_track_value)            self._stop_track_clip_buttons = None                        if (self.is_enabled() and buttons != None):            assert ((buttons == None) or (isinstance(buttons, tuple)))             #log(str(self._num_tracks) + "  vs  " + str(len(buttons)) )            assert ((len(buttons) == self._num_tracks))                self._stop_track_clip_buttons = buttons                                      if (self._stop_track_clip_buttons != None):                 index = 0                for button in self._stop_track_clip_buttons:                     if button != None :                        assert isinstance(button, ButtonElement)                         self.trackStopper[button] = index                        index = index+1                        if not button.value_has_listener(self._stop_track_value):                            button.add_value_listener(self._stop_track_value, identify_sender=True)                                                     self._on_fired_slot_index_changed(list(buttons).index(button))             #SessionComponent._rebuild_callback(self)                 self.update()