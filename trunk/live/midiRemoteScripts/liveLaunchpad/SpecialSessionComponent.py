import Live #@UnresolvedImport @UnusedImportfrom consts import * #@UnusedWildImportfrom _Framework.SessionComponent import SessionComponent #@UnresolvedImportfrom _liveUtils.Logger import log #@UnresolvedImport @UnusedImportclass SpecialSessionComponent(SessionComponent):	' SPECIAL SESSION SUBCLASS THAT HANDLES CONFIGURABLEBUTTONS '	__module__ = __name__	" INIT "	def __init__(self, num_tracks, num_scenes):		SessionComponent.__init__(self, num_tracks, num_scenes)	" DISCONNECT - remove all listeners"	def disconnect(self):		self.remove_listeners()		SessionComponent.disconnect(self)		" REMOVE LISTENERS "	def remove_listeners(self):		for index in range(len(self._tracks_and_listeners)):			track = self._tracks_and_listeners[index][0]			fire_listener = self._tracks_and_listeners[index][1]			playing_listener = self._tracks_and_listeners[index][2]			if (track != None):				if track.fired_slot_index_has_listener(fire_listener):					track.remove_fired_slot_index_listener(fire_listener)				if track.playing_slot_index_has_listener(playing_listener):					track.remove_playing_slot_index_listener(playing_listener)		self._tracks_and_listeners = []			" REASSIGN TRACKS "	def _reassign_tracks(self):		#log("reassign tracks:")		self.remove_listeners()		tracks_to_use = self.tracks_to_use()		button_index = 0		for index in range(self._num_tracks):			if button_index < GROUPS_CONSIDERED:				if self.song().tracks[index].is_foldable:					#log("	-> foldable track at: " + str(index))					fire_listener = lambda var1 = index:self._on_fired_slot_index_changed(var1)					playing_listener = lambda var1 = index:self._on_playing_slot_index_changed(var1)					track = None					if ((self._track_offset + index) < len(tracks_to_use)):						track = tracks_to_use[(self._track_offset + index)]					if (track != None):						self._tracks_and_listeners.append((track, fire_listener, playing_listener))						track.add_fired_slot_index_listener(fire_listener)						track.add_playing_slot_index_listener(playing_listener)					self._update_stop_clips_led(index)					button_index = button_index + 1	" CALLBACK FIRE"	def _on_fired_slot_index_changed(self, index):		self._update_stop_clips_led(index)	" CALLBACK PLAYING "	def _on_playing_slot_index_changed(self, index):		self._update_stop_clips_led(index)	" STOP LEDS"	def _update_stop_clips_led(self, index):		if (self.is_enabled() and (self._stop_track_clip_buttons != None)):			button = self._stop_track_clip_buttons[index]			if (index in range(len(self._tracks_and_listeners))):				track = self._tracks_and_listeners[index][0]				if (track.fired_slot_index == -2):					button.send_value(self._stop_track_clip_value)				elif (track.playing_slot_index >= 0):					button.send_value(21)				else:					button.turn_off()			else:				button.send_value(4)	""" SETUP STOP BUTTONS """	def set_stop_track_clip_buttons(self, buttons):		#log("set_stop_track_clip_buttons:" + str(buttons))		#log("self.numtracks:" + str(self._num_tracks))		#if buttons != None:			#log("buttons num   :" + str(len(buttons)))		assert ((buttons == None) or (isinstance(buttons, tuple) and (len(buttons) <= self._num_tracks)))		#remove old listener		if (self._stop_track_clip_buttons != None): 			for button in self._stop_track_clip_buttons: 				if button != None:					if button.value_has_listener(self._stop_track_value):						button.remove_value_listener(self._stop_track_value)			self._stop_track_clip_buttons = None			if (self.is_enabled() and buttons != None):			assert ((buttons == None) or (isinstance(buttons, tuple))) 			self._stop_track_clip_buttons = buttons						  			if (self._stop_track_clip_buttons != None):				button_index = 0				for track_index in range(len(self.song().tracks)):					#log("buttonindex:" + str(button_index))					if self.song().tracks[track_index].is_foldable:						if button_index < GROUPS_CONSIDERED:							#log("found foldable at: " +str(track_index))							button = self._stop_track_clip_buttons[track_index]							#log("the button at index: " + str(button))							button.add_value_listener(self._stop_track_value, identify_sender=True)								self._on_fired_slot_index_changed(list(self._stop_track_clip_buttons).index(button)) 							button_index = button_index + 1		self.update()