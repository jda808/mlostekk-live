import Live from _Framework.SessionComponent import SessionComponent from _Framework.ButtonElement import ButtonElement from ConfigurableButtonElement import ConfigurableButtonElement from _liveLogger.Logger import logclass SpecialSessionComponent(SessionComponent):	' Special session subclass that handles ConfigurableButtons '	__module__ = __name__	def __init__(self, num_tracks, num_scenes, parent):		self._parent = parent		self._my_c_instance = self._parent._parent._my_c_instance		log("SpecialSessionComponent::__init__")		#SessionComponent.__init__(self, num_tracks, num_scenes)		self.num_scenes = num_scenes		self.num_visible_tracks = len(self._parent._parent._my_c_instance.song().visible_tracks)		SessionComponent.__init__(self, self.num_visible_tracks, self.num_scenes)		self.index_KICK = -1		self.index_BASE = -1		self.index_SNR = -1		self.index_HATZ = -1		self.index_FX = -1		self.index_SYNTH = -1		self.index_LEAD = -1		self.index_TEX = -1		self.idx = []		self.trax = []		self.parseTracksForMyGroupIdx()			def disconnect(self):		log("SpecialSessionComponent::disconnect")		for index in range(len(self._tracks_and_listeners)):			track = self._tracks_and_listeners[index][0]			listener = self._tracks_and_listeners[index][2]			if ((track != None) and track.playing_slot_index_has_listener(listener)):				track.remove_playing_slot_index_listener(listener)		SessionComponent.disconnect(self)	def checkAndHandleWidthChange(self):		log("SpecialSessionComponent::checkAndHandleWidthChange -- applying new session border")		self.num_visible_tracks = numTracks #@UndefinedVariable		SessionComponent.__init__(self, self.num_visible_tracks, self.num_scenes)			def _reassign_tracks(self):		numTracks = len(self._parent._parent._my_c_instance.song().visible_tracks)		if(self.num_visible_tracks == numTracks):			return		self.handleWidthChange()		log("SpecialSessionComponent::_reassign_tracks")		self.checkAndHandleWidthChange()		self.parseTracksForMyGroupIdx()		for index in range(len(self._tracks_and_listeners)):			track = self._tracks_and_listeners[index][0]			fire_listener = self._tracks_and_listeners[index][1]			playing_listener = self._tracks_and_listeners[index][2]			if (track != None):				if track.fired_slot_index_has_listener(fire_listener):					track.remove_fired_slot_index_listener(fire_listener)				if track.playing_slot_index_has_listener(playing_listener):					track.remove_playing_slot_index_listener(playing_listener)		self._tracks_and_listeners = []		tracks_to_use = self.tracks_to_use()				" this was original "#		log(str(self._num_tracks))#		for index in range(self._num_tracks):#			fire_listener = lambda index = index:self._on_fired_slot_index_changed(index)#			playing_listener = lambda index = index:self._on_playing_slot_index_changed(index)##			track = None#			log(" track number " + str(index) + " : " + str(tracks_to_use[index].name))#			if ((self._track_offset + index) < len(tracks_to_use)):#				track = tracks_to_use[(self._track_offset + index)]#			if (track != None):#				self._tracks_and_listeners.append((track, fire_listener, playing_listener))#				track.add_fired_slot_index_listener(fire_listener)#				track.add_playing_slot_index_listener(playing_listener)#			self._update_stop_clips_led(index)						" append all my group tracks "		for index in range(len(self.idx)):			fire_listener = lambda index = index:self._on_fired_slot_index_changed(self.idx[index])			playing_listener = lambda index = index:self._on_playing_slot_index_changed(self.idx[index])			assert(self.idx[index] != -1)			track = self.trax[index]			self._tracks_and_listeners.append((track, fire_listener, playing_listener))			track.add_fired_slot_index_listener(fire_listener)			track.add_playing_slot_index_listener(playing_listener)			self._update_stop_clips_led(self.idx[index])							def _on_fired_slot_index_changed(self, index):		log("SpecialSessionComponent::_on_fired_slot_index_changed (" + str(index) + ")")		self._update_stop_clips_led(index)	def _on_playing_slot_index_changed(self, index):		log("SpecialSessionComponent::_on_playing_slot_index_changed (" + str(index) + ")")		self._update_stop_clips_led(index)	def _update_stop_clips_led(self, index):		log("SpecialSessionComponent::_update_stop_clips_led (" + str(index) + ")")		if (self.is_enabled() and (self._stop_track_clip_buttons != None)):			button = self._stop_track_clip_buttons[index]			if (index in range(len(self._tracks_and_listeners))):				track = self._tracks_and_listeners[index][0]				if (track.fired_slot_index == -2):					button.send_value(self._stop_track_clip_value)				elif (track.playing_slot_index >= 0):					button.send_value(21)				else:					button.turn_off()			else:				button.send_value(4)	def parseTracksForMyGroupIdx(self):		self.index_KICK = -1		self.index_BASE = -1		self.index_SNR = -1		self.index_HATZ = -1		self.index_FX = -1		self.index_SYNTH = -1		self.index_LEAD = -1		self.index_TEX = -1		for index in range(len(self._my_c_instance.song().visible_tracks)):			if (self._my_c_instance.song().visible_tracks[index].name == str("KICK")):				self.index_KICK = index			elif (self._my_c_instance.song().visible_tracks[index].name == str("BASE")):				self.index_BASE = index			elif (self._my_c_instance.song().visible_tracks[index].name == str("SNR")):				self.index_SNR = index			elif (self._my_c_instance.song().visible_tracks[index].name == str("HATZ")):				self.index_HATZ = index			elif (self._my_c_instance.song().visible_tracks[index].name == str("FX")):				self.index_FX = index			elif (self._my_c_instance.song().visible_tracks[index].name == str("SYNTH")):				self.index_SYNTH = index			elif (self._my_c_instance.song().visible_tracks[index].name == str("LEAD")):				self.index_LEAD = index			elif (self._my_c_instance.song().visible_tracks[index].name == str("TEX")):				self.index_TEX = index		log(str(self.index_KICK) + ", " + str(self.index_BASE) + ", " + str(self.index_SNR) + ", " + str(self.index_HATZ) + ", " + str(self.index_FX) + ", " + str(self.index_SYNTH) + ", " + str(self.index_LEAD) + ", " + str(self.index_TEX))		self.updateIdxArray()		self.updateTrackArray()			def updateIdxArray(self):		self.idx = []		self.idx.append(self.index_KICK)		self.idx.append(self.index_BASE)		self.idx.append(self.index_SNR)		self.idx.append(self.index_HATZ)		self.idx.append(self.index_FX)		self.idx.append(self.index_SYNTH)		self.idx.append(self.index_LEAD)		self.idx.append(self.index_TEX)			def updateTrackArray(self):		self.trax = []		for index in range(len(self.idx)):			self.trax.append(self._my_c_instance.song().tracks[self.idx[index]])		